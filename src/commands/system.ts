import { botConfig, antiOutConfig } from "../config/index";
import { isAdmin } from "./index";
import moment from "moment";
import { logger } from '../utils/logger';
import { BannedUser, BanManager } from '../utils/ban-manager';
import { Command } from "../types";

// Create ban manager instance 
const banManager = new BanManager();

export const ban: Command = {
  name: "ban",
  description: "C·∫•m ng∆∞·ªùi d√πng kh·ªèi nh√≥m (ch·ªâ admin)",
  usage: `${botConfig.prefix}ban <@tag> [l√Ω do]`,
  permission: "admin",
  execute: async (api, event) => {
    try {
      if (!isAdmin(event.senderID)) {
        await api.sendMessage("‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", event.threadID);
        return;
      }

      const mentions = event.mentions;
      if (!mentions || Object.keys(mentions).length === 0) {
        await api.sendMessage("‚ùå Vui l√≤ng tag ng∆∞·ªùi c·∫ßn c·∫•m", event.threadID);
        return;
      }

      const reason = event.body.split(" ").slice(2).join(" ") || "Kh√¥ng c√≥ l√Ω do";
      const userID = Object.keys(mentions)[0];

      if (isAdmin(userID)) {
        await api.sendMessage("‚ùå Kh√¥ng th·ªÉ c·∫•m admin!", event.threadID);
        return;
      }

      await banManager.banUser(userID, {
        reason,
        bannedBy: event.senderID,
        bannedAt: new Date()
      });

      await api.removeUserFromGroup(userID, event.threadID);
      await api.sendMessage(
        `‚úÖ ƒê√£ c·∫•m ng∆∞·ªùi d√πng ${mentions[userID]}\n` +
        `üìù L√Ω do: ${reason}`,
        event.threadID
      );

      logger.info(`User ${userID} banned by ${event.senderID}`, {
        reason,
        threadID: event.threadID
      });

    } catch (error) {
      const err = error instanceof Error ? error : new Error(String(error));
      logger.error("L·ªói khi c·∫•m ng∆∞·ªùi d√πng", err);
      await api.sendMessage("‚ùå Kh√¥ng th·ªÉ c·∫•m ng∆∞·ªùi d√πng. Vui l√≤ng ki·ªÉm tra quy·ªÅn c·ªßa bot.", event.threadID);
    }
  }
};

export const unban: Command = {
  name: "unban", 
  description: "G·ª° c·∫•m ng∆∞·ªùi d√πng (ch·ªâ admin)",
  usage: `${botConfig.prefix}unban <ID>`,
  permission: "admin",
  execute: async (api, event) => {
    if (!isAdmin(event.senderID)) {
      await api.sendMessage("‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", event.threadID);
      return;
    }

    const userID = event.body.split(" ")[1];
    if (!userID) {
      await api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng c·∫ßn g·ª° c·∫•m", event.threadID);
      return;
    }

    try {
      await banManager.unbanUser(userID);
      await api.sendMessage(`‚úÖ ƒê√£ g·ª° c·∫•m ng∆∞·ªùi d√πng ${userID}`, event.threadID);
    } catch (error) {
      const err = error instanceof Error ? error : new Error(String(error));
      logger.error("L·ªói khi g·ª° c·∫•m ng∆∞·ªùi d√πng", err);
      await api.sendMessage("‚ùå Kh√¥ng th·ªÉ g·ª° c·∫•m ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i sau.", event.threadID);
    }
  }
};

export const unsend: Command = {
  name: "unsend",
  description: "G·ª° tin nh·∫Øn c·ªßa bot",
  usage: `${botConfig.prefix}unsend <reply tin nh·∫Øn>`,
  execute: async (api, event) => {
    if (!event.messageReply || !event.messageReply.messageID) {
      await api.sendMessage("‚ùå Vui l√≤ng reply tin nh·∫Øn c·∫ßn g·ª°", event.threadID);
      return;
    }

    try {
      await api.unsendMessage(event.messageReply.messageID);
    } catch (error) {
      const err = error instanceof Error ? error : new Error(String(error));
      logger.error("L·ªói khi g·ª° tin nh·∫Øn", err);
      await api.sendMessage("‚ùå Kh√¥ng th·ªÉ g·ª° tin nh·∫Øn. C√≥ th·ªÉ tin nh·∫Øn ƒë√£ qu√° c≈©.", event.threadID);
    }
  }
};

export const broadcast: Command = {
  name: "broadcast",
  description: "G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ c√°c nh√≥m",
  usage: `${botConfig.prefix}broadcast <n·ªôi dung>`,
  permission: "admin",
  execute: async (api, event) => {
    if (!isAdmin(event.senderID)) {
      await api.sendMessage("‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", event.threadID);
      return;
    }

    const message = event.body.slice(botConfig.prefix.length + 9).trim();
    if (!message) {
      await api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p n·ªôi dung c·∫ßn th√¥ng b√°o!", event.threadID);
      return;
    }

    try {
      await api.sendMessage("üì¢ ƒêang g·ª≠i th√¥ng b√°o...", event.threadID);

      const broadcastMessage = `üì¢ Th√¥ng b√°o t·ª´ Admin:\n\n${message}\n\n` +
        `üë§ Ng∆∞·ªùi g·ª≠i: ${(await api.getUserInfo(event.senderID))[event.senderID].name}\n` +
        `‚è∞ Th·ªùi gian: ${moment().format('LLL')}`;

      await api.sendMessage(broadcastMessage, event.threadID);

      await api.sendMessage("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng!", event.threadID);
    } catch (error) {
      const err = error instanceof Error ? error : new Error(String(error));
      logger.error("L·ªói g·ª≠i th√¥ng b√°o", err);
      await api.sendMessage("‚ùå Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o. Vui l√≤ng th·ª≠ l·∫°i sau!", event.threadID);
    }
  }
};

export const admin: Command = {
  name: "admin",
  description: "Qu·∫£n l√Ω danh s√°ch admin",
  usage: `${botConfig.prefix}admin <add/remove/list> [@tag]`,
  permission: "owner",
  execute: async (api, event) => {
    if (event.senderID !== botConfig.owner) {
      await api.sendMessage("‚ùå Ch·ªâ ch·ªß bot m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", event.threadID);
      return;
    }

    const args = event.body.split(/\s+/).slice(1);
    const action = args[0]?.toLowerCase();

    if (!action || !["add", "remove", "list"].includes(action)) {
      await api.sendMessage(
        `‚ùå Vui l√≤ng s·ª≠ d·ª•ng:\n` +
          `${botConfig.prefix}admin add @tag - Th√™m admin\n` +
          `${botConfig.prefix}admin remove @tag - X√≥a admin\n` +
          `${botConfig.prefix}admin list - Xem danh s√°ch admin`,
        event.threadID
      );
      return;
    }

    try {
      switch (action) {
        case "add": {
          const mentions = event.mentions;
          if (!mentions || Object.keys(mentions).length === 0) {
            await api.sendMessage("‚ùå Vui l√≤ng tag ng∆∞·ªùi c·∫ßn th√™m l√†m admin", event.threadID);
            return;
          }

          const newAdminId = Object.keys(mentions)[0];
          if (botConfig.admins.includes(newAdminId)) {
            await api.sendMessage("‚ùå Ng∆∞·ªùi n√†y ƒë√£ l√† admin!", event.threadID);
            return;
          }

          botConfig.admins.push(newAdminId);
          await api.sendMessage(
            `‚úÖ ƒê√£ th√™m ${mentions[newAdminId]} l√†m admin!\n` +
              `üë• T·ªïng s·ªë admin: ${botConfig.admins.length}`,
            event.threadID
          );
          break;
        }

        case "remove": {
          const mentions = event.mentions;
          if (!mentions || Object.keys(mentions).length === 0) {
            await api.sendMessage("‚ùå Vui l√≤ng tag admin c·∫ßn x√≥a", event.threadID);
            return;
          }

          const removeId = Object.keys(mentions)[0];
          const index = botConfig.admins.indexOf(removeId);
          if (index === -1) {
            await api.sendMessage("‚ùå Ng∆∞·ªùi n√†y kh√¥ng ph·∫£i l√† admin!", event.threadID);
            return;
          }

          botConfig.admins.splice(index, 1);
          await api.sendMessage(
            `‚úÖ ƒê√£ x√≥a ${mentions[removeId]} kh·ªèi danh s√°ch admin!\n` +
              `üë• T·ªïng s·ªë admin c√≤n l·∫°i: ${botConfig.admins.length}`,
            event.threadID
          );
          break;
        }

        case "list": {
          const adminInfos = await Promise.all(
            botConfig.admins.map(async (id) => {
              const info = await api.getUserInfo(id);
              return `- ${info[id].name} (${id})`;
            })
          );

          const message = `üëë Ch·ªß bot: ${(await api.getUserInfo(botConfig.owner))[botConfig.owner].name}\n\n` +
            `üë• Danh s√°ch ${adminInfos.length} admin:\n${adminInfos.join("\n")}`;

          await api.sendMessage(message, event.threadID);
          break;
        }
      }
    } catch (error) {
      const err = error instanceof Error ? error : new Error(String(error));
      logger.error("L·ªói qu·∫£n l√Ω admin", err);
      await api.sendMessage("‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!", event.threadID);
    }
  }
};

export const system: Command = {
  name: "system",
  description: "Xem th√¥ng tin h·ªá th·ªëng bot",
  usage: `${botConfig.prefix}system`,
  permission: "admin",
  execute: async (api, event) => {
    if (!botConfig.admins.includes(event.senderID) && event.senderID !== botConfig.owner) {
      await api.sendMessage("‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", event.threadID);
      return;
    }

    const uptime = process.uptime();
    const memory = process.memoryUsage();
    const os = process.platform;
    const nodeVersion = process.version;

    const systemInfo = `üìä Th√¥ng tin h·ªá th·ªëng:\n\n` +
      `‚è±Ô∏è Uptime: ${Math.floor(uptime / 86400)}d ${Math.floor((uptime % 86400) / 3600)}h ${Math.floor((uptime % 3600) / 60)}m\n` +
      `üíæ RAM: ${Math.round(memory.heapUsed / 1024 / 1024)}MB / ${Math.round(memory.heapTotal / 1024 / 1024)}MB\n` +
      `üíª OS: ${os}\n` +
      `üîß Node.js: ${nodeVersion}\n` +
      `üë• T·ªïng admin: ${botConfig.admins.length}\n` +
      `‚öôÔ∏è Prefix: ${botConfig.prefix}\n`;

    await api.sendMessage(systemInfo, event.threadID);
  }
};

export const reload: Command = {
  name: "reload",
  description: "T·∫£i l·∫°i c·∫•u h√¨nh bot",
  usage: `${botConfig.prefix}reload`,
  permission: "admin",
  execute: async (api, event) => {
    if (!botConfig.admins.includes(event.senderID) && event.senderID !== botConfig.owner) {
      await api.sendMessage("‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", event.threadID);
      return;
    }

    try {
      await api.sendMessage("üîÑ ƒêang t·∫£i l·∫°i c·∫•u h√¨nh bot...", event.threadID);
      // TODO: Implement configuration reload logic
      await new Promise(resolve => setTimeout(resolve, 1000));
      await api.sendMessage("‚úÖ ƒê√£ t·∫£i l·∫°i c·∫•u h√¨nh th√†nh c√¥ng!", event.threadID);
    } catch (error) {
      const err = error instanceof Error ? error : new Error(String(error));
      logger.error("L·ªói t·∫£i l·∫°i c·∫•u h√¨nh", err);
      await api.sendMessage("‚ùå Kh√¥ng th·ªÉ t·∫£i l·∫°i c·∫•u h√¨nh. Vui l√≤ng th·ª≠ l·∫°i sau!", event.threadID);
    }
  }
};

export const commands = [admin, system, reload, ban, unban, unsend, broadcast];
import type { Command } from '../types';
import config from '../config';
import os from 'os';
import fs from 'fs-extra';
import path from 'path';

export const system: Command = {
  name: 'system',
  description: 'Hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng',
  usage: `${config.prefix}system`,
  execute: async (api, event) => {
    try {
      const stats = await getSystemStats();
      await api.sendMessage(stats, event.threadID);
    } catch (error) {
      console.error('L·ªói khi l·∫•y th√¥ng tin h·ªá th·ªëng:', error);
      await api.sendMessage('‚ùå ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin h·ªá th·ªëng!', event.threadID);
    }
  }
};

async function getSystemStats() {
  // Th√¥ng tin h·ªá th·ªëng
  const uptime = formatUptime(os.uptime());
  const totalMem = formatBytes(os.totalmem());
  const freeMem = formatBytes(os.freemem());
  const usedMem = formatBytes(os.totalmem() - os.freemem());
  const memPercent = Math.round(((os.totalmem() - os.freemem()) / os.totalmem()) * 100);
  const cpuUsage = os.loadavg()[0].toFixed(2);
  const platform = os.platform();
  const hostname = os.hostname();
  
  // Th√¥ng tin logs
  const logStats = await getLogStats();
  
  return `
üìä SYSTEM MONITOR üìä
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚öôÔ∏è H·ªÜ TH·ªêNG:
‚Ä¢ Hostname: ${hostname}
‚Ä¢ Platform: ${platform}
‚Ä¢ Uptime: ${uptime}
‚Ä¢ CPU Load: ${cpuUsage}%
‚Ä¢ Memory: ${usedMem}/${totalMem} (${memPercent}%)

üìù TH·ªêNG K√ä LOGS:
${logStats}

‚è±Ô∏è Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`;
}

async function getLogStats() {
  try {
    const logDir = path.join(process.cwd(), 'logs');
    if (!await fs.pathExists(logDir)) {
      return '‚Ä¢ Kh√¥ng c√≥ d·ªØ li·ªáu log';
    }
    
    const logTypes = ['info', 'warn', 'error', 'critical', 'debug'];
    const stats = [];
    
    for (const type of logTypes) {
      const filePath = path.join(logDir, `${type}.log`);
      if (await fs.pathExists(filePath)) {
        const stat = await fs.stat(filePath);
        const size = formatBytes(stat.size);
        const content = await fs.readFile(filePath, 'utf8');
        const lines = content.split('\n').filter(line => line.trim()).length;
        
        const emoji = type === 'info' ? 'üìò' :
                     type === 'warn' ? '‚ö†Ô∏è' :
                     type === 'error' ? '‚ùå' :
                     type === 'critical' ? 'üö®' : 'üîç';
        
        stats.push(`‚Ä¢ ${emoji} ${type.toUpperCase()}: ${lines} entries (${size})`);
      }
    }
    
    return stats.join('\n');
  } catch (error) {
    console.error('L·ªói khi ƒë·ªçc th·ªëng k√™ log:', error);
    return '‚Ä¢ L·ªói khi ƒë·ªçc th·ªëng k√™ log';
  }
}

function formatUptime(seconds: number) {
  const days = Math.floor(seconds / 86400);
  const hours = Math.floor((seconds % 86400) / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);
  
  return `${days}d ${hours}h ${minutes}m ${secs}s`;
}

function formatBytes(bytes: number) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}
