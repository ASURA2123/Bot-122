import { Command } from "../types";
import config from "../config";
import { logger } from "../utils/logger";
import fs from "fs-extra";
import path from "path";
import ytdl from "ytdl-core";
import axios from 'axios';

// Th∆∞ m·ª•c l∆∞u file t·∫£i v·ªÅ
const DOWNLOAD_DIR = "downloads";
fs.ensureDirSync(DOWNLOAD_DIR);

export const download: Command = {
  name: "download",
  description: "T·∫£i video t·ª´ YouTube ho·∫∑c c√°c trang web kh√°c",
  usage: `${config.prefix}download <link>`,
  execute: async (api, event) => {
    const link = event.body.slice(config.prefix.length + 9).trim();
    if (!link) {
      await api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p link c·∫ßn t·∫£i!", event.threadID);
      return;
    }

    try {
      await api.sendMessage("‚è≥ ƒêang x·ª≠ l√Ω y√™u c·∫ßu t·∫£i video...", event.threadID);

      // Ki·ªÉm tra xem c√≥ ph·∫£i link YouTube kh√¥ng
      const isYouTube = ytdl.validateURL(link);

      if (isYouTube) {
        // L·∫•y th√¥ng tin video
        const info = await ytdl.getInfo(link);
        const videoTitle = info.videoDetails.title;
        const videoLength = parseInt(info.videoDetails.lengthSeconds);

        // Ki·ªÉm tra ƒë·ªô d√†i video
        if (videoLength > 600) {
          await api.sendMessage("‚ùå Video qu√° d√†i! Vui l√≤ng ch·ªçn video ng·∫Øn h∆°n 10 ph√∫t.", event.threadID);
          return;
        }

        // T·∫°o t√™n file duy nh·∫•t
        const fileName = `${Date.now()}_${path.basename(videoTitle)}.mp4`;
        const filePath = path.join(DOWNLOAD_DIR, fileName);

        // T·∫£i video
        await new Promise((resolve, reject) => {
          ytdl(link, {
            quality: 'lowest'
          })
          .pipe(fs.createWriteStream(filePath))
          .on('finish', resolve)
          .on('error', reject);
        });

        // G·ª≠i video
        await api.sendMessage(
          {
            body: `üé• ${videoTitle}`,
            attachment: fs.createReadStream(filePath)
          },
          event.threadID
        );

        // X√≥a file sau khi g·ª≠i
        fs.unlink(filePath).catch(err => {
          const error = new Error("Failed to delete video file");
          error.name = "FileCleanupError";
          logger.error("L·ªói x√≥a file video", error);
        });

      } else {
        // TODO: Th√™m h·ªó tr·ª£ t·∫£i t·ª´ c√°c trang kh√°c
        await api.sendMessage("‚ùå Hi·ªán t·∫°i ch·ªâ h·ªó tr·ª£ t·∫£i video t·ª´ YouTube.", event.threadID);
      }

    } catch (error) {
      const err = error instanceof Error ? error : new Error(String(error));
      err.name = 'VideoDownloadError';
      logger.error("L·ªói khi t·∫£i video", err);
      await api.sendMessage("‚ùå Kh√¥ng th·ªÉ t·∫£i video. Vui l√≤ng th·ª≠ l·∫°i sau.", event.threadID);
    }
  }
};

export const video: Command = {
  name: "video",
  description: "Ph√°t video t·ª´ YouTube",
  usage: `${config.prefix}video <link ho·∫∑c t·ª´ kh√≥a>`,
  execute: async (api, event) => {
    const query = event.body.slice(config.prefix.length + 6).trim();
    if (!query) {
      await api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p link ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm!", event.threadID);
      return;
    }

    try {
      await api.sendMessage("‚è≥ ƒêang x·ª≠ l√Ω y√™u c·∫ßu video...", event.threadID);

      // Ki·ªÉm tra xem c√≥ ph·∫£i l√† YouTube URL kh√¥ng
      const isValidUrl = ytdl.validateURL(query);

      if (!isValidUrl) {
        const error = new Error("Invalid YouTube URL");
        error.name = "InvalidURLError";
        throw error;
      }

      // L·∫•y th√¥ng tin video
      const info = await ytdl.getInfo(query);
      const videoTitle = info.videoDetails.title;
      const videoLength = parseInt(info.videoDetails.lengthSeconds);

      // Ki·ªÉm tra ƒë·ªô d√†i video
      if (videoLength > 600) { // Gi·ªõi h·∫°n 10 ph√∫t
        await api.sendMessage("‚ùå Video qu√° d√†i! Vui l√≤ng ch·ªçn video ng·∫Øn h∆°n 10 ph√∫t.", event.threadID);
        return;
      }

      // T·∫°o t√™n file duy nh·∫•t
      const fileName = `${Date.now()}_${path.basename(videoTitle)}.mp4`;
      const filePath = path.join(DOWNLOAD_DIR, fileName);

      // T·∫£i video
      await new Promise((resolve, reject) => {
        ytdl(query, {
          quality: 'lowest' // Ch·ªçn ch·∫•t l∆∞·ª£ng th·∫•p ƒë·ªÉ t·∫£i nhanh h∆°n
        })
        .pipe(fs.createWriteStream(filePath))
        .on('finish', resolve)
        .on('error', reject);
      });

      // G·ª≠i video
      await api.sendMessage(
        {
          body: `üé• ${videoTitle}`,
          attachment: fs.createReadStream(filePath)
        },
        event.threadID
      );

      // X√≥a file sau khi g·ª≠i
      fs.unlink(filePath).catch(err => {
        const error = new Error("Failed to delete video file");
        error.name = "FileCleanupError";
        logger.error("L·ªói x√≥a file video", error);
      });

    } catch (error) {
      const err = error instanceof Error ? error : new Error(String(error));
      err.name = err.name || 'VideoCommandError';
      logger.error("L·ªói l·ªánh video", err);
      await api.sendMessage("‚ùå Kh√¥ng th·ªÉ t·∫£i video. Vui l√≤ng th·ª≠ l·∫°i sau.", event.threadID);
    }
  }
};

export const img: Command = {
  name: "img",
  description: "T·∫£i ·∫£nh t·ª´ link ho·∫∑c t√¨m ki·∫øm",
  usage: `${config.prefix}img <link/t·ª´ kho√°>`,
  execute: async (api, event) => {
    const query = event.body.slice(config.prefix.length + 4).trim();
    if (!query) {
      await api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p link ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm!", event.threadID);
      return;
    }

    try {
      await api.sendMessage("üîç ƒêang t√¨m ki·∫øm ·∫£nh...", event.threadID);

      // TODO: Implement image search/download
      await api.sendMessage("üñºÔ∏è T√≠nh nƒÉng t·∫£i ·∫£nh ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!", event.threadID);

    } catch (error) {
      const err = error instanceof Error ? error : new Error(String(error));
      err.name = 'ImageCommandError';
      logger.error("L·ªói l·ªánh img", err);
      await api.sendMessage("‚ùå Kh√¥ng th·ªÉ t·∫£i ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau.", event.threadID);
    }
  }
};

export const meme: Command = {
  name: "meme",
  description: "Xem ·∫£nh meme ng·∫´u nhi√™n",
  usage: `${config.prefix}meme`,
  execute: async (api, event) => {
    try {
      await api.sendMessage("üé≠ ƒêang t√¨m meme hay...", event.threadID);

      try {
        // G·ªçi Reddit API ƒë·ªÉ l·∫•y meme ng·∫´u nhi√™n t·ª´ r/memes
        const response = await axios.get('https://www.reddit.com/r/memes/random.json');
        const memeData = response.data[0].data.children[0].data;
        const memeUrl = memeData.url;
        const memeTitle = memeData.title;

        // T·∫£i v√† l∆∞u ·∫£nh
        const fileName = `${Date.now()}_meme.jpg`;
        const filePath = path.join(DOWNLOAD_DIR, fileName);

        const imageResponse = await axios({
          method: 'GET',
          url: memeUrl,
          responseType: 'stream'
        });

        await new Promise((resolve, reject) => {
          imageResponse.data
            .pipe(fs.createWriteStream(filePath))
            .on('finish', resolve)
            .on('error', reject);
        });

        // G·ª≠i meme
        await api.sendMessage(
          {
            body: `üòÇ ${memeTitle}`,
            attachment: fs.createReadStream(filePath)
          },
          event.threadID
        );

        // X√≥a file sau khi g·ª≠i
        fs.unlink(filePath).catch(err => {
          const error = new Error("Failed to delete meme file");
          error.name = "FileCleanupError";
          logger.error("L·ªói x√≥a file meme", error);
        });

      } catch (error) {
        const err = error instanceof Error ? error : new Error(String(error));
        err.name = 'MemeDownloadError';
        logger.error("L·ªói t·∫£i meme", err);
        await api.sendMessage("‚ùå Kh√¥ng th·ªÉ t·∫£i meme. Th·ª≠ l·∫°i sau nh√©!", event.threadID);
      }

    } catch (error) {
      const err = error instanceof Error ? error : new Error(String(error));
      err.name = 'MemeCommandError';
      logger.error("L·ªói l·ªánh meme", err);
      await api.sendMessage("‚ùå Kh√¥ng th·ªÉ t·∫£i meme. Vui l√≤ng th·ª≠ l·∫°i sau.", event.threadID);
    }
  }
};

export const commands = [video, img, meme, download];