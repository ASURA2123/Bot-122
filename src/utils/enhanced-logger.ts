import winston from 'winston';
import 'winston-daily-rotate-file';
import chalk from 'chalk';
import path from 'path';
import util from 'util';
import nodemailer from 'nodemailer';
import { WebClient } from '@slack/web-api';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
const LOG_DIR = process.env.LOG_DIR || path.join(process.cwd(), 'logs');
const LOG_LEVEL = process.env.LOG_LEVEL || 'info';
const LOG_MAX_SIZE = parseInt(process.env.LOG_MAX_SIZE || '5242880', 10); // 5MB default
const LOG_MAX_FILES = parseInt(process.env.LOG_MAX_FILES || '5', 10);
const LOG_CONSOLE = process.env.LOG_CONSOLE !== 'false';
const LOG_FILE = process.env.LOG_FILE !== 'false';

// Email configuration
const EMAIL_SERVICE = process.env.EMAIL_SERVICE || 'gmail';
const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;
const EMAIL_TO = process.env.EMAIL_TO;
const EMAIL_ENABLED = process.env.EMAIL_ENABLED === 'true' && EMAIL_USER && EMAIL_PASS && EMAIL_TO;

// Slack configuration
const SLACK_TOKEN = process.env.SLACK_TOKEN;
const SLACK_CHANNEL = process.env.SLACK_CHANNEL || '#bot-alerts';
const SLACK_ENABLED = process.env.SLACK_ENABLED === 'true' && SLACK_TOKEN;

// Kh·ªüi t·∫°o Nodemailer (d√πng ƒë·ªÉ g·ª≠i email th√¥ng b√°o l·ªói cho admin)
let transporter: any = null;
if (EMAIL_ENABLED) {
  transporter = nodemailer.createTransport({
    service: EMAIL_SERVICE,
    auth: {
      user: EMAIL_USER,
      pass: EMAIL_PASS
    }
  });
}

// Slack client ƒë·ªÉ g·ª≠i th√¥ng b√°o cho admin
let slackClient: any = null;
if (SLACK_ENABLED) {
  slackClient = new WebClient(SLACK_TOKEN);
}

// ƒê·ªãnh nghƒ©a custom levels
const levels = {
  critical: 0,   // L·ªói nghi√™m tr·ªçng c·∫ßn th√¥ng b√°o ngay
  error: 1,      // L·ªói th√¥ng th∆∞·ªùng
  warn: 2,       // C·∫£nh b√°o
  system: 3,     // Th√¥ng tin h·ªá th·ªëng
  info: 4,       // Th√¥ng tin chung
  debug: 5,      // Th√¥ng tin debug
  admin: 6       // Th√¥ng tin d√†nh cho admin
};

// Custom format cho m√†u s·∫Øc v√† bi·ªÉu t∆∞·ª£ng
const colors = {
  critical: 'red.bold',
  error: 'red',
  warn: 'yellow',
  system: 'magenta',
  info: 'green',
  debug: 'blue',
  admin: 'cyan.bold'
};

// Bi·ªÉu t∆∞·ª£ng cho t·ª´ng lo·∫°i log
const icons = {
  critical: 'üî¥',
  error: '‚ùå',
  warn: '‚ö†Ô∏è',
  system: 'üîß',
  info: '‚úÖ',
  debug: 'üîç',
  admin: 'üëë'
};

// Format time ƒë·∫πp h∆°n
const timeFormat = () => {
  return new Date().toLocaleString('vi-VN', {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
  });
};

// T·∫°o format cho console
const consoleFormat = winston.format.printf(({ level, message, metadata }) => {
  const color = colors[level] || 'white';
  const icon = icons[level] || '';

  // X·ª≠ l√Ω level v·ªõi m√†u
  const colorizedLevel = color.split('.').reduce((acc, cur) => chalk[cur](acc), level.toUpperCase());

  // Format message
  let formattedMessage = `${icon} [${timeFormat()}] ${colorizedLevel.padEnd(10)}: ${message}`;

  // Th√™m metadata n·∫øu c√≥
  if (metadata && Object.keys(metadata).length > 0) {
    formattedMessage += '\n' + util.inspect(metadata, { colors: true, depth: 5 });
  }

  return formattedMessage;
});

// T·∫°o winston logger instance
const winstonLogger = winston.createLogger({
  levels,
  level: LOG_LEVEL, // L·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: []
});

// Th√™m console transport n·∫øu ƒë∆∞·ª£c b·∫≠t
if (LOG_CONSOLE) {
  winstonLogger.add(new winston.transports.Console({
    format: winston.format.combine(
      consoleFormat
    ),
  }));
}

// Th√™m file transports n·∫øu ƒë∆∞·ª£c b·∫≠t
if (LOG_FILE) {
  // File transports cho t·ª´ng level
  const levels = ['debug', 'info', 'warn', 'error', 'critical', 'system', 'admin'];
  
  levels.forEach(level => {
    winstonLogger.add(new winston.transports.DailyRotateFile({
      level,
      filename: path.join(LOG_DIR, `${level}.log`),
      datePattern: 'YYYY-MM-DD',
      maxSize: `${LOG_MAX_SIZE}`,
      maxFiles: LOG_MAX_FILES,
    }));
  });
}

// H√†m g·ª≠i email th√¥ng b√°o l·ªói cho admin
const sendEmailToAdmin = (subject: string, message: string) => {
  if (!EMAIL_ENABLED || !transporter) {
    winstonLogger.warn('Email notifications are disabled or not configured properly');
    return;
  }

  const mailOptions = {
    from: EMAIL_USER,
    to: EMAIL_TO,
    subject: `${icons.critical} ${subject}`,
    text: `${message}\n\nTime: ${timeFormat()}\nEnvironment: ${process.env.NODE_ENV || 'development'}`
  };

  transporter.sendMail(mailOptions, (error: Error, info: any) => {
    if (error) {
      winstonLogger.error('L·ªói g·ª≠i email: ', { error: error.message });
    } else {
      winstonLogger.info('Email ƒë√£ ƒë∆∞·ª£c g·ª≠i: ' + info.response);
    }
  });
};

// H√†m g·ª≠i th√¥ng b√°o Slack cho admin
const sendSlackMessageToAdmin = async (message: string) => {
  if (!SLACK_ENABLED || !slackClient) {
    winstonLogger.warn('Slack notifications are disabled or not configured properly');
    return;
  }

  try {
    await slackClient.chat.postMessage({
      channel: SLACK_CHANNEL,
      text: `${icons.critical} *L·ªói quan tr·ªçng*\n${message}\n_Time: ${timeFormat()}_\n_Environment: ${process.env.NODE_ENV || 'development'}_`
    });
    winstonLogger.info('Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi Slack!');
  } catch (error: any) {
    winstonLogger.error('L·ªói g·ª≠i th√¥ng b√°o Slack: ', { error: error.message });
  }
};

// H√†m highlight text
const highlight = (text: string): string => chalk.cyan(text);

// H√†m t·∫°o warning box
const warningBox = (text: string): string => {
  const lines = text.split('\n');
  const maxLength = Math.max(...lines.map(line => line.length));
  const border = '‚ïê'.repeat(maxLength + 4);

  let result = chalk.yellow(`‚ïî${border}‚ïó\n`);
  for (const line of lines) {
    result += chalk.yellow(`‚ïë  ${line.padEnd(maxLength)}  ‚ïë\n`);
  }
  result += chalk.yellow(`‚ïö${border}‚ïù`);

  return result;
};

// H√†m t·∫°o error box
const errorBox = (text: string): string => {
  const lines = text.split('\n');
  const maxLength = Math.max(...lines.map(line => line.length));
  const border = '‚ïê'.repeat(maxLength + 4);

  let result = chalk.red(`‚ïî${border}‚ïó\n`);
  for (const line of lines) {
    result += chalk.red(`‚ïë  ${line.padEnd(maxLength)}  ‚ïë\n`);
  }
  result += chalk.red(`‚ïö${border}‚ïù`);

  return result;
};

// H√†m l·∫•y logs
const getLogs = (level?: string, limit = 100, from?: Date, to?: Date, search?: string) => {
  // Implement l·∫•y logs t·ª´ file ho·∫∑c memory
  // Placeholder, c·∫ßn implement theo y√™u c·∫ßu c·ª• th·ªÉ
  const filteredLogs = [];

  return filteredLogs;
};

// Export logger object v·ªõi c√°c h√†m b·ªï sung
export const enhancedLogger = {
  debug: (message: string, metadata?: Record<string, unknown>) => winstonLogger.debug(message, { metadata }),
  info: (message: string, metadata?: Record<string, unknown>) => winstonLogger.info(message, { metadata }),
  warn: (message: string, metadata?: Record<string, unknown>) => winstonLogger.warn(message, { metadata }),
  error: (message: string, error?: Error, metadata?: Record<string, unknown>) => {
    const errorData = error ? { error: error.message, stack: error.stack, ...metadata } : metadata;
    winstonLogger.error(message, { ...errorData });
  },
  critical: (message: string, error?: Error, metadata?: Record<string, unknown>) => {
    const errorData = error ? { error: error.message, stack: error.stack, ...metadata } : metadata;
    winstonLogger.log('critical', message, { ...errorData });
    
    // G·ª≠i th√¥ng b√°o cho admin qua email v√† Slack khi c√≥ l·ªói nghi√™m tr·ªçng
    if (EMAIL_ENABLED) {
      sendEmailToAdmin('L·ªói nghi√™m tr·ªçng t·ª´ Bot', message + (error ? `\n\nError: ${error.message}\n${error.stack}` : ''));
    }
    
    if (SLACK_ENABLED) {
      sendSlackMessageToAdmin(message + (error ? `\n\nError: ${error.message}` : ''));
    }
  },
  system: (message: string, metadata?: Record<string, unknown>) => winstonLogger.log('system', message, { metadata }),
  admin: (message: string, metadata?: Record<string, unknown>) => winstonLogger.log('admin', message, { metadata }),
  getLogs,
  highlight,
  warningBox,
  errorBox,
  sendEmailToAdmin,
  sendSlackMessageToAdmin
};

// ƒê·∫∑t t√™n l·∫°i ƒë·ªÉ s·ª≠ d·ª•ng l√†m default export
const loggerExport = enhancedLogger;

export default loggerExport;